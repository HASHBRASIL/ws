
{#<link rel="stylesheet" href="css/ol.css" type="text/css" />#}
{#<link rel="stylesheet" href="css/ol3gm.css" type="text/css" />#}

<style>
    @import url(http://fonts.googleapis.com/css?family=Quattrocento+Sans:400,400italic,700);

    body {
        padding-top: 60px;
    }
    .map {
        height: 400px;
        width: 100%;
    }
    .ol-attribution {
        max-width: calc(100%-3em);
    }
    #tags {
        display: none;
    }

    body, h1, h2, h3, h4, p, li, td, th {
        font-family: Quattrocento Sans;
    }
    .navbar-inverse .navbar-inner {
        background: #1F6B75;
    }
    .navbar-inverse .brand {
        color: white;
        padding: 5px;
    }
    #popup {
        padding-bottom: 45px;
    }

</style>


<link rel="stylesheet" href="http://openlayers.org/en/v3.16.0/css/ol.css" type="text/css">

<script src="http://openlayers.org/en/v3.16.0/build/ol.js" type="text/javascript"></script>
<link rel="stylesheet" href="src/ol3-layerswitcher.css" />

<div class="container-fluid">

    <div class="row-fluid">
        <div class="span12">
            <div id="map" class="map">
                <div id="popup"></div>

            </div>
        </div>
    </div>

</div>


{#<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/ol3/3.14.0/ol.css" />#}
{#<link rel="stylesheet" href="layerswitcher.css" />#}

<script src="src/ol3-layerswitcher.js"></script>



<script type="text/javascript">


    var textFill = new ol.style.Fill({
        color: '#fff'
    });
    var textStroke = new ol.style.Stroke({
        color: 'rgba(0, 0, 0, 0.6)',
        width: 3
    });
    var invisibleFill = new ol.style.Fill({
        color: 'rgba(255, 255, 255, 0.01)'
    });


    var maxFeatureCount, clusterLayer;
    function calculateClusterInfo(resolution) {
        maxFeatureCount = 0;
        var features = clusterLayer.getSource().getFeatures();
        var feature, radius;
        for (var i = features.length - 1; i >= 0; --i) {
            feature = features[i];
            var originalFeatures = feature.get('features');
            var extent = ol.extent.createEmpty();
            var j, jj;
            for (j = 0, jj = originalFeatures.length; j < jj; ++j) {
                ol.extent.extend(extent, originalFeatures[j].getGeometry().getExtent());
            }
            maxFeatureCount = Math.max(maxFeatureCount, jj);
            radius = 0.25 * (ol.extent.getWidth(extent) + ol.extent.getHeight(extent)) /
                    resolution;
            feature.set('radius', radius);
        }
    }


    // @todo fazer array de tipo de icones
    var coloriStroke = {1: '#FF0000', 2: '#00FF00', 3: '#0000FF', 4: '#FFFF00'};
    var coloriFill = {1: '#FF6666', 2: '#66FF66', 3: '#6666FF', 4: '#FFFF66'};

    function locationStyle(feature) {


        style = new ol.style.Style({
            //                geometry: feature.getGeometry(),
            image: new ol.style.Circle({
                radius: 4,
                fill: new ol.style.Fill({color: coloriFill[feature.get('tp_local')]}),
                stroke: new ol.style.Stroke({color: coloriStroke[feature.get('tp_local')], width: 1})
                //                    fill: new ol.style.Fill({color: coloriFill[1]}),
                //                    stroke: new ol.style.Stroke({color: coloriStroke[1], width: 1})
            }),
        });
        return [style];
    }


    var currentResolution;
    function styleFunction(feature, resolution) {
        if (resolution != currentResolution) {
            calculateClusterInfo(resolution);
            currentResolution = resolution;
        }
        var style;
        if (feature.get('features')) {

            var size = feature.get('features').length;

            if (size > 1) {
                style = new ol.style.Style({
                    image: new ol.style.Circle({
                        radius: feature.get('radius'),
                        fill: new ol.style.Fill({
                            color: [255, 153, 0, Math.min(0.8, 0.4 + (size / maxFeatureCount))]
                        })
                    }),
                    text: new ol.style.Text({
                        text: size.toString(),
                        fill: textFill,
                        stroke: textStroke
                    })
                });
            } else {
                var originalFeature = feature.get('features')[0];
                locationStyle(originalFeature);
            }
        }
        return style;
    }


    var dataSource = new ol.source.Vector({
        url: 'src/dadosfake2.geojson',
        format: new ol.format.GeoJSON({
            defaultDataProjection: 'EPSG:4326',
            projection: 'EPSG:3857'

        })

    });
    var basicLayer = new ol.layer.Vector({
        source: dataSource,

        title: 'Padrão',
        name: 'Básico',
        visible: true,
        style: locationStyle
    });

    // create the layer
    heatMapLayer = new ol.layer.Heatmap({
        source: dataSource,
        title: 'Calor',
        type: 'extra',
        radius: 3,
        visible: false,
    });

    clusterLayer = new ol.layer.Vector({
        source: new ol.source.Cluster({
            distance: 40,
            source: dataSource
        }),
        title: 'Cluster',
        visible: false,
        style: styleFunction
    });

//    map.addLayer(cluster);
//    map.addLayer(heatMapLayer);

    var map = new ol.Map({
        target: 'map',
        controls: ol.control.defaults({
            attributionOptions: /** @type {olx.control.AttributionOptions} */ ({
                collapsible: false
            })
        }),

        layers: [

        new ol.layer.Group({
            'title': 'Camadas Básicas',
            layers: [
                new ol.layer.Tile({
                title: 'Water color',
                type: 'base',
                visible: false,
                source: new ol.source.Stamen({
                    layer: 'watercolor'
                })
            }),
                new ol.layer.Tile({
                    title: 'geoserver WMS',
                    type: 'base',
                    visible: false,
                    source: new ol.source.TileWMS({
                        url: 'http://demo.boundlessgeo.com/geoserver/wms',
                        params: {
                            'LAYERS': 'ne:NE1_HR_LC_SR_W_DR'
                        }
                    })
                }),
                new ol.layer.Tile({
                    title: 'OSM',
                    type: 'base',
                    visible: false,
                    source: new ol.source.OSM()
                }),
                new ol.layer.Group({
                    title: 'Satellite and roads',
                    type: 'base',
                    combine: true,
                    visible: true,
                    layers: [
                        new ol.layer.Tile({
                            source: new ol.source.MapQuest({layer: 'sat'})
                        }),
                        new ol.layer.Tile({
                            source: new ol.source.MapQuest({layer: 'hyb'})
                        })
                    ]
                }),
                new ol.layer.Tile({
                    title: 'Satellite',
                    type: 'base',
                    visible: false,
                    source: new ol.source.MapQuest({layer: 'sat'})
                })
            ]
            }),

            new ol.layer.Group({
                'title': 'Camadas Extras',
                layers: [
                    basicLayer,
                    heatMapLayer,
                    clusterLayer
                ]
            })
        ],
        view: new ol.View({

            center: ol.proj.transform([-47.75, -15.75 ], 'EPSG:4326', 'EPSG:3857'),
//            center: ol.proj.transform([-37, -17], 'EPSG:4326', 'EPSG:3857'),
            zoom: 10
        })
    });

    var layerSwitcher = new ol.control.LayerSwitcher({
        tipLabel: 'Legenda' // Optional label for button
    });
    map.addControl(layerSwitcher);

    map.addControl(new ol.control.ScaleLine({units: 'pt'}));


var element = document.getElementById('popup');

var popup = new ol.Overlay({
    element: element,
    positioning: 'bottom-center',
    stopEvent: false
});
map.addOverlay(popup);

// display popup on click
map.on('click', function(evt) {
    var feature = map.forEachFeatureAtPixel(evt.pixel,
            function(feature) {
                return feature;
            });


    if (!feature) {
        var originalFeature = null;
    } else if (feature && feature.get('features') == undefined) {

        var originalFeature = feature;
    } else if (feature.get('features')) {

        var size = feature.get('features').length;

        if (size > 1) {
            //        console.log('nao entra aqui nao???' + size );
            //
//                    popup.setPosition(evt.coordinate);
//                    $(element).popover({
//                        'placement': 'top',
//                        'html': true,
//                        'content': 'Existem ' + size +' Posições neste local'
//                    });
        } else if (size == 1) {
            var originalFeature = feature.get('features')[0];
        }
    }

    if (originalFeature) {

        popup.setPosition(evt.coordinate);

        $(element).popover({
            'placement': 'top',
            'html': true,
            'content': 'Conteúdo de testes código: ' + originalFeature.get('id_local')
        });
        $(element).popover('show');
    } else {
        $(element).popover('destroy');
    }


});

// change mouse cursor when over marker
map.on('pointermove', function(e) {
    if (e.dragging) {
        $(element).popover('destroy');
        return;
    }
    var pixel = map.getEventPixel(e.originalEvent);
    var hit = map.hasFeatureAtPixel(pixel);
    map.getTargetElement().style.cursor = hit ? 'pointer' : '';
});


</script>

{#<script src="ol/heatmap.js" type="text/javascript"></script>#}